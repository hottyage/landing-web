<template>

</template>
<script>
    export default {
    data() {
    return {
    scene: null,
    clock: null,
    globe: null,
    camera: null,
    controls: null,
    renderer: null,
    globeRadius: 100,
    globeWidth: 4098 / 2,
    globeHeight: 1968 / 2,
}
},
    methods: {
    init () {
    const instance = this.$axios.create({
    baseURL: '/',
});
    instance.$get('/countries.geojson').then( countries => {
    //console.log('countries', countries)
    this.clock = new this.$THREE.Clock()
    this.scene = new this.$THREE.Scene()
    // this.scene.background = new this.$THREE.Color(0xff0000)
    // this.scene.background = new this.$THREE.Color(0x000000)

    //const parentWidth = window.innerWidth
    const parentWidth = document.getElementById('globe').offsetWidth
    const parentHeight = document.getElementById('globe').offsetHeight

    const {width, height} = document.getElementById('globe').getBoundingClientRect();

    // Create camera
    this.camera = new this.$THREE.PerspectiveCamera(45, parentWidth / parentHeight, 0.1, 10000)
    // Create renderer
    this.renderer = new this.$THREE.WebGLRenderer({antialias: true, alpha: true})
    this.renderer.setSize(parentWidth, parentHeight)
    document.getElementById('globe').appendChild(this.renderer.domElement)
    // Create controls
    this.controls = new this.$CameraControls(this.camera, this.renderer.domElement)
    this.controls.zoom = false
    this.controls.truckSpeed = 0
    this.controls.boundaryFriction = 1000
    this.controls.autoRotate = false
    this.controls.enableZoom = false
    this.controls.minZoom = 0
    this.controls.maxZoom = 0
    this.controls.autoRotateSpeed = 1
    this.controls.rotateSpeed = 0.5

    this.controls.dollySpeed = 0.8
    this.controls.minDistance = 400
    this.controls.maxDistance = 400
    this.controls.minPolarAngle = Math.PI / 2
    this.controls.maxPolarAngle = Math.PI / 2

    this.controls.setLookAt(383, 2, 112, 0, 0, 0, false)
    window.addEventListener('resize', this.onWindowResize, false)

    this.globe = new this.$ThreeGlobe()
    .globeImageUrl('/earth_opt_dark_06.png')
    // .bumpImageUrl('/earth-topology.png')
    .atmosphereColor('#000000')
    .hexPolygonsData(countries.features)
    .hexPolygonResolution(3)
    .hexPolygonMargin(0.3)
    .hexPolygonColor(() => `#6E6E6E`)

    /*.polygonsData(countries.features.filter(d => d.properties.ISO_A2 !== 'AQ'))
    .polygonCapColor(() => 'rgba(200, 0, 0, 0.7)')
    .polygonSideColor(() => 'rgba(0, 200, 0, 0.1)')
    .polygonStrokeColor(() => '#111')*/


    .onGlobeReady( () => {
    //console.log('onGlobeReady')
    const globeMaterial = this.globe.globeMaterial();
    // globeMaterial.bumpScale = 10;
    // new this.$THREE.TextureLoader().load('/earth-water2.png', texture => {
    //   console.log('TextureLoader')
    //   globeMaterial.specularMap = texture;
    //   globeMaterial.specular = new this.$THREE.Color('grey');
    //   globeMaterial.shininess = 15;
    // });
    // new this.$THREE.TextureLoader().load('/earth-water.jpg', texture => {
    //   globeMaterial.transparent = true;
    //   globeMaterial.alphaMap = texture;
    //
    // });
})
    /*setTimeout(() => this.globe.polygonAltitude(() => Math.random()), 2000)*/
    this.scene.add(this.globe);



    //console.log('Globe', this.globe)

    this.scene.add(new this.$THREE.AmbientLight(0xbbbbbb));
    this.scene.add(new this.$THREE.DirectionalLight(0xffffff, 1));

    /*this.scene.add(new this.$THREE.AmbientLight(0xbbbbbb));
    this.scene.add(new this.$THREE.DirectionalLight(0xffffff, 0.6));*/

    this.animate()
    //console.log('this.scene', this.scene)
})
},
    animate () {
    this.globe.children[0].rotation.y -= 0.005;

    //console.log('this' , this.controls)

    this.controls.update(this.clock.getDelta())
    this.animatFrameId = requestAnimationFrame(this.animate)
    this.renderer.render(this.scene, this.camera)
},
    onWindowResize () {
    const parentWidth = document.getElementById('globe').offsetWidth
    const parentHeight = document.getElementById('globe').offsetHeight
    this.camera.aspect = parentWidth / parentHeight
    this.camera.updateProjectionMatrix()
    this.renderer.setSize(parentWidth, parentHeight)
},
    convertFlatCoordsToSphereCoords (x, y) {
    let latitude = ((x - this.globeWidth) / this.globeWidth) * -180
    let longitude = ((y - this.globeHeight) / this.globeHeight) * -90
    latitude = (latitude * Math.PI) / 180
    longitude = (longitude * Math.PI) / 180
    const radius = Math.cos(longitude) * this.globeRadius

    return {
    x: Math.cos(latitude) * radius,
    y: Math.sin(longitude) * this.globeRadius,
    z: Math.sin(latitude) * radius,
}
}
},
    mounted () {
    this.init()
}
}
</script>
<style lang="scss" scoped>

    .globe-parent {
    width: 100%;
    height: 100%;
}


    /* COLOURS */

    $colour-cyan: #00FFD3;
    $colour-white: #FFFFFF;
    $colour-black: #000000;


    $colourStart: #1E8CE4;
    $colourMid: #260F77;
    $colourEnd: #00F3CA;

    body {
    position: relative;
    width: 100vw;
    height: 100vh;
    font-family: "Cairo", sans-serif;
    font-size: 14px;
    line-height: 14px;
    font-weight: 400;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -moz-font-feature-settings: "liga" on;
    color: #FFFFFF;
    overflow-x: hidden;
    background: $colourStart;
    background: -moz-linear-gradient(-45deg, $colourStart 0%, $colourEnd 100%);
    background: -webkit-linear-gradient(-45deg, $colourStart 0%, $colourEnd 100%);
    background: linear-gradient(135deg, $colourStart 0%, $colourEnd 100%);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$colourStart}', endColorstr='${colourEnd}', GradientType=1);
}

    @mixin animation($animation) {
    -webkit - animation: $animation;
    -moz-animation: $animation;
    -ms-animation: $animation;
    -o-animation: $animation;
    animation: $animation;
}

    @mixin transition($transition) {
    -webkit - transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

    @mixin transform($transform) {
    -webkit - transform: $transform;
    -moz-transform: $transform;
    -ms-transform: $transform;
    -o-transform: $transform;
    transform: $transform;
}


    /* GLOBE */

    .globe {
    position: relative;
    width: 100%;
    height: 100%;
}

    .globe .globe-list {
    z - index: 10;
    position: absolute;
    left: 0;
    top: 0;
    list-style: none;
    display: none;
}

    $dotSize: 16px;
    $dotSizeLarge: $dotSize + ($dotSize / 2);

    .globe .globe-list {
    opacity: 0;
    @include transition(opacity 3s cubic-bezier(0.175, 0.885, 0.320, 1.275));
}

    .globe .globe-list.active {
    opacity: 1;
}

    .globe .globe-list > li {
    opacity: 0.4;
    position: absolute;
    margin-left: -($dotSize / 2);
    margin-top: -($dotSize / 2);
    width: $dotSize;
    height: $dotSize;
    border-radius: 50%;
    background: $colour-cyan;
    @include transition(opacity 1s cubic-bezier(0.175, 0.885, 0.320, 1.275));
}

    .globe .globe-list > li.active {
    opacity: 1;
    margin-left: -($dotSizeLarge / 2);
    margin-top: -($dotSizeLarge / 2);
    width: $dotSizeLarge;
    height: $dotSizeLarge;
}

    .globe .globe-list > li:before {
    content: "";
    opacity: 0.5;
    pointer-events: none;
    position: absolute;
    left: 50%;
    top: 50%;
    margin-left: -($dotSize / 2);
    margin-top: -($dotSize / 2);
    width: $dotSize;
    height: $dotSize;
    border-radius: 50%;
    background: $colour-cyan;
    @include animation(2s pulse infinite linear);
}

    @-webkit-keyframes pulse {
    0 % {
    - webkit - transform: scale(1);
}
    50% {
    opacity: 0.5;
}
    100% {
    opacity: 0;
    -webkit-transform: scale(2);
}
}

    @-moz-keyframes pulse {
    0 % {
    - moz - transform: scale(1);
}
    50% {
    opacity: 0.5;
}
    100% {
    opacity: 0;
    -moz-transform: scale(2);
}
}

    @-ms-keyframes pulse {
    0 % {
    - ms - transform: scale(1);
}
    50% {
    opacity: 0.5;
}
    100% {
    opacity: 0;
    -ms-transform: scale(2);
}
}

    @-o-keyframes pulse {
    0 % {
    - o - transform: scale(1);
}
    50% {
    opacity: 0.5;
}
    100% {
    opacity: 0;
    -o-transform: scale(2);
}
}

    @keyframes pulse {
    0 % {
        transform: scale(1);
    }
    50% {
    opacity: 0.5;
}
    100% {
    opacity: 0;
    transform: scale(2);
}
}

    .globe .globe-list > li.active:before {
    margin - left: -($dotSizeLarge / 2);
    margin-top: -($dotSizeLarge / 2);
    width: $dotSizeLarge;
    height: $dotSizeLarge;
}

    .globe .globe-list > li.active,
    .globe .globe-list > li.active:before {
    background: $colour-white;
}

    .globe .globe-list .text {
    position: absolute;
    opacity: 0.8;
    right: $dotSize + 5px;
    top: 50%;
    display: block;
    font-size: 14px;
    line-height: 14px;
    font-weight: 600;
    text-align: right;
    text-shadow: -1px -1px 0 $colour-black, 1px -1px 0 $colour-black, -1px 1px 0 $colour-black, 1px 1px 0 $colour-black;
    color: $colour-white;
    white-space: nowrap;
    @include transform(translateY(-50%));
}

    .globe .globe-list > li.active .text {
    opacity: 1;
    right: $dotSizeLarge + 5px;
    font-size: 20px;
    line-height: 20px;
    font-weight: 700;
}

    .globe .globe-canvas {
    z - index: 1;
    position: absolute;
    left: 0;
    top: 0;
}

    .svg-wrapper svg {
    height: 100%;
    width: 100%;
    opacity: .3;
    animation: rotation 10s linear infinite
}

    .svg-wrapper {
    //opacity: 0;
    display: inline-block;
    position: absolute;
    //width: 80vh;
    //height: 80%;
    left: 0;
    right: 0;
    //top: 10%;
    top: 0;
    bottom: 0;
    margin: auto;
    //transform: scale(0.5);
    transform: scale(0.7);
    transition: opacity 1s ease-out 1.6s, transform 1s ease-out 1.6s;

    &.active {
    opacity: 1;
    transform: none
}
}

    @keyframes rotation {
    0 % {
        transform: scaleX(-1) rotate(360deg)
}
    100% {
    transform: scaleX(-1) rotate(0deg)
}
}

</style>
